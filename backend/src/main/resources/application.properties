# ===================================================================
# SERVER CONFIGURATION
# ===================================================================
# Sets the port on which the server will run. 8080 is the default.
server.port=8080

# ===================================================================
# H2 DATABASE CONFIGURATION (In-Memory for Development)
# ===================================================================
# The connection URL for the H2 in-memory database. 'testdb' is the database name.
spring.datasource.url=jdbc:h2:mem:testdb
# The username for the database.
spring.datasource.username=sa
# The password for the database.
spring.datasource.password=password
# The JDBC driver class for H2.
spring.datasource.driverClassName=org.h2.Driver

# Enable the H2 web console for debugging.
spring.h2.console.enabled=true
# The path to access the H2 console (e.g., http://localhost:8080/h2-console).
spring.h2.console.path=/h2-console

# ===================================================================
# JPA / HIBERNATE CONFIGURATION
# ===================================================================
# The SQL dialect for H2, which helps Hibernate generate optimized SQL.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Automatically update the database schema based on your @Entity classes.
# Use 'validate' in production. 'update' is good for development.
spring.jpa.hibernate.ddl-auto=update
# Show the SQL queries generated by Hibernate in the console. Useful for debugging.
spring.jpa.show-sql=true

# ===================================================================
# JWT (JSON WEB TOKEN) SECURITY CONFIGURATION
# ===================================================================
# The secret key for signing JWTs.
# IMPORTANT: This key MUST be changed to a long, random, and secure string in production!
# Do not use this default key in a live application.
app.jwt.secret=ThisIsAReallyLongAndSecureSecretKeyForYourRentalApplicationDoNotUseThisInProduction

# The expiration time for JWTs in milliseconds.
# 86400000 ms = 24 hours
app.jwt.expirationMs=86400000